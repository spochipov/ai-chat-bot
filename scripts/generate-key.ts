import crypto from 'crypto';
import { DatabaseService } from '../src/services/database';
import { logger } from '../src/utils/logger';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
function generateAccessKey(): string {
  const prefix = 'ACK';
  const randomBytes = crypto.randomBytes(16);
  const key = randomBytes.toString('hex').toUpperCase();
  return `${prefix}_${key}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function createAccessKey(createdBy: string): Promise<string> {
  let attempts = 0;
  const maxAttempts = 5;

  while (attempts < maxAttempts) {
    const key = generateAccessKey();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á —É–Ω–∏–∫–∞–ª–µ–Ω
      const existingKey = await DatabaseService.findAccessKeyByKey(key);
      
      if (!existingKey) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        await DatabaseService.createAccessKey({
          key,
          createdBy,
        });
        
        logger.info('Access key created successfully', { key, createdBy });
        return key;
      }
      
      attempts++;
      logger.warn('Generated key already exists, retrying...', { key, attempt: attempts });
    } catch (error) {
      logger.error('Error creating access key', error);
      throw error;
    }
  }
  
  throw new Error('Failed to generate unique access key after maximum attempts');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI
async function main() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await DatabaseService.initialize();
    
    // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const adminId = process.argv[2] || process.env.ADMIN_TELEGRAM_ID;
    
    if (!adminId) {
      console.error('Error: Admin ID is required');
      console.log('Usage: npm run generate-key <admin_telegram_id>');
      console.log('Or set ADMIN_TELEGRAM_ID environment variable');
      process.exit(1);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á
    const accessKey = await createAccessKey(adminId);
    
    console.log('‚úÖ Access key generated successfully!');
    console.log('üîë Key:', accessKey);
    console.log('üë§ Created by:', adminId);
    console.log('üìÖ Created at:', new Date().toISOString());
    console.log('');
    console.log('üìã Share this key with the user to grant them access to the bot.');
    console.log('‚ö†Ô∏è  Keep this key secure and do not share it publicly.');
    
  } catch (error) {
    logger.error('Failed to generate access key', error);
    console.error('‚ùå Error:', error instanceof Error ? error.message : 'Unknown error');
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await DatabaseService.disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
  });
}

export { generateAccessKey, createAccessKey };
