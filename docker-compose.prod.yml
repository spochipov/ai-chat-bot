services:
  postgres:
    image: postgres:15-alpine
    container_name: ai-chat-bot-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_chat_bot}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - ai-chat-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ai-chat-bot-redis-prod
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --requirepass \"$$REDIS_PASSWORD\"
      else
        redis-server
      fi
      "
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - redis_data_prod:/data
    networks:
      - ai-chat-bot-network
    restart: unless-stopped
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping | grep PONG
        else
          redis-cli ping | grep PONG
        fi
        "
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: ai-chat-bot-app-prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ai_chat_bot}
      REDIS_URL: ${REDIS_PASSWORD:+redis://:${REDIS_PASSWORD}@redis:6379}${REDIS_PASSWORD:-redis://redis:6379}
      BOT_TOKEN: ${BOT_TOKEN}
      ADMIN_TELEGRAM_ID: ${ADMIN_TELEGRAM_ID}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      OPENROUTER_MODEL: ${OPENROUTER_MODEL:-openai/gpt-4}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-20971520}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-txt,pdf,docx,jpg,jpeg,png,gif,webp}
      YARN_PRODUCTION: ${YARN_PRODUCTION:-true}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-chat-bot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: ai-chat-bot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - ai-chat-bot-network
    restart: unless-stopped

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  ai-chat-bot-network:
    driver: bridge
