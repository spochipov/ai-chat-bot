import { BotContext } from '../middleware/auth';
import { logger } from '../../utils/logger';
import { DatabaseService } from '../../services/database';
import { OpenRouterService, OpenRouterMessage } from '../../services/openrouter';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import mammoth from 'mammoth';
import pdfParse from 'pdf-parse';

export const fileHandler = async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (!ctx.user) {
      await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await ctx.sendChatAction('typing');

    let fileId: string | undefined;
    let fileName: string | undefined;
    let fileSize: number | undefined;
    let mimeType: string | undefined;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (ctx.message && 'document' in ctx.message && ctx.message.document) {
      const doc = ctx.message.document;
      fileId = doc.file_id;
      fileName = doc.file_name || 'document';
      fileSize = doc.file_size;
      mimeType = doc.mime_type;
    } else if (ctx.message && 'photo' in ctx.message && ctx.message.photo && ctx.message.photo.length > 0) {
      const photo = ctx.message.photo[ctx.message.photo.length - 1]; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
      if (photo) {
        fileId = photo.file_id;
        fileName = 'photo.jpg';
        fileSize = photo.file_size;
        mimeType = 'image/jpeg';
      }
    } else {
      await ctx.reply('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.');
      return;
    }

    if (!fileId) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const maxFileSize = parseInt(process.env['MAX_FILE_SIZE'] || '20971520'); // 20MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (fileSize && fileSize > maxFileSize) {
      await ctx.reply(`‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(maxFileSize / 1024 / 1024)}MB`);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = (process.env['ALLOWED_FILE_TYPES'] || 'txt,pdf,docx,jpg,jpeg,png,gif,webp').split(',');
    const fileExtension = fileName?.split('.').pop()?.toLowerCase();
    
    if (!fileExtension || !allowedTypes.includes(fileExtension)) {
      await ctx.reply(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${allowedTypes.join(', ')}`);
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
      const fileLink = await ctx.telegram.getFileLink(fileId);
      const response = await axios.get(fileLink.href, { responseType: 'arraybuffer' });
      const fileBuffer = Buffer.from(response.data);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
      const uploadsDir = path.join(process.cwd(), 'uploads');
      if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
      }

      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const localFileName = `${timestamp}_${fileName}`;
      const localFilePath = path.join(uploadsDir, localFileName);
      fs.writeFileSync(localFilePath, fileBuffer);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      let fileContent = '';
      let prompt = '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.';

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const userMessage = ctx.message && 'caption' in ctx.message ? ctx.message.caption : '';
      if (userMessage) {
        prompt = userMessage;
      }

      if (mimeType?.startsWith('image/')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await ctx.sendChatAction('typing');
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenRouter
        const imageBase64 = fileBuffer.toString('base64');
        const imageUrl = `data:${mimeType};base64,${imageBase64}`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const messages: OpenRouterMessage[] = [
          {
            role: 'system',
            content: '–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.'
          },
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: prompt
              },
              {
                type: 'image_url',
                image_url: {
                  url: imageUrl
                }
              }
            ]
          }
        ];

        const response = await OpenRouterService.sendMessage(messages, {
          model: process.env.OPENROUTER_MODEL || 'openai/gpt-4o'
        });

        await sendMessageWithFallback(ctx, response.content);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await saveFileMessage(ctx, prompt, response, localFilePath, localFileName, mimeType);

      } else if (mimeType === 'application/pdf') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
        await ctx.sendChatAction('typing');
        
        const pdfData = await pdfParse(fileBuffer);
        fileContent = pdfData.text;

        if (!fileContent.trim()) {
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF —Ñ–∞–π–ª–∞.');
          return;
        }

        await processTextContent(ctx, prompt, fileContent, localFilePath, localFileName, mimeType);

      } else if (mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ DOCX —Ñ–∞–π–ª–æ–≤
        await ctx.sendChatAction('typing');
        
        const result = await mammoth.extractRawText({ buffer: fileBuffer });
        fileContent = result.value;

        if (!fileContent.trim()) {
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ DOCX —Ñ–∞–π–ª–∞.');
          return;
        }

        await processTextContent(ctx, prompt, fileContent, localFilePath, localFileName, mimeType);

      } else if (mimeType === 'text/plain' || fileExtension === 'txt') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        await ctx.sendChatAction('typing');
        
        fileContent = fileBuffer.toString('utf-8');

        if (!fileContent.trim()) {
          await ctx.reply('‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.');
          return;
        }

        await processTextContent(ctx, prompt, fileContent, localFilePath, localFileName, mimeType);

      } else {
        await ctx.reply('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        return;
      }

      logger.info('File processed successfully', {
        userId: ctx.user.id,
        telegramId: ctx.user.telegramId.toString(),
        fileName,
        fileSize,
        mimeType,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error processing file', {
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        userId: ctx.user.id,
        telegramId: ctx.user.telegramId.toString(),
        fileName
      });

      let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.';
      
      if (error instanceof Error) {
        if (error.message.includes('Rate limit')) {
          errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
        } else if (error.message.includes('Invalid OpenRouter API key')) {
          errorMessage = 'üîë –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (error.message.includes('service is temporarily unavailable')) {
          errorMessage = 'üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
      }

      await ctx.reply(errorMessage);
    }

  } catch (error) {
    logger.error('Error in fileHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
async function processTextContent(
  ctx: BotContext, 
  prompt: string, 
  content: string, 
  filePath: string, 
  fileName: string, 
  mimeType: string | undefined
) {
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
  const maxContentLength = 50000; // ~50KB —Ç–µ–∫—Å—Ç–∞
  let processedContent = content;
  
  if (content.length > maxContentLength) {
    processedContent = content.substring(0, maxContentLength) + '\n\n[... —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ...]';
  }

  const messages: OpenRouterMessage[] = [
    {
      role: 'system',
      content: '–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.'
    },
    {
      role: 'user',
      content: `${prompt}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ "${fileName}":\n\n${processedContent}`
    }
  ];

  const response = await OpenRouterService.sendMessage(messages);
  await sendMessageWithFallback(ctx, response.content);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  await saveFileMessage(ctx, prompt, response, filePath, fileName, mimeType);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveFileMessage(
  ctx: BotContext,
  userPrompt: string,
  response: any,
  filePath: string,
  fileName: string,
  mimeType: string | undefined
) {
  if (!ctx.user) return;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userMessageData: any = {
    userId: ctx.user.id,
    content: userPrompt || '–§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
    role: 'USER',
    fileUrl: filePath,
    fileName,
    fileType: mimeType,
  };
  
  if (ctx.message?.message_id) {
    userMessageData.messageId = ctx.message.message_id;
  }
  
  await DatabaseService.createMessage(userMessageData);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  const assistantMessageData: any = {
    userId: ctx.user.id,
    content: response.content,
    role: 'ASSISTANT',
    tokens: response.usage.totalTokens,
    cost: OpenRouterService.calculateCost(
      response.usage.promptTokens,
      response.usage.completionTokens,
      response.model
    ),
  };
  
  await DatabaseService.createMessage(assistantMessageData);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  await DatabaseService.createUsage({
    userId: ctx.user.id,
    tokens: response.usage.totalTokens,
    cost: OpenRouterService.calculateCost(
      response.usage.promptTokens,
      response.usage.completionTokens,
      response.model
    ),
    model: response.model,
    requestType: 'file',
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ message.ts)
async function sendMessageWithFallback(ctx: BotContext, text: string): Promise<void> {
  try {
    await ctx.reply(text, { parse_mode: 'Markdown' });
  } catch (error) {
    if (error instanceof Error && error.message.includes("can't parse entities")) {
      logger.warn('Markdown parsing failed, sending as plain text', {
        error: error.message,
        textLength: text.length
      });
      await ctx.reply(text);
    } else {
      throw error;
    }
  }
}
