import { BotContext } from '../middleware/auth';
import { handleAccessKeyInput } from './start';
import { logger } from '../../utils/logger';
import { DatabaseService } from '../../services/database';
import { AIService, AIMessage } from '../../services/ai';
import fs from 'fs';
import path from 'path';

export const messageHandler = async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
    if (ctx.awaitingAccessKey) {
      const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
      
      if (!messageText) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.');
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
      const success = await handleAccessKeyInput(ctx, messageText.trim());
      
      if (success) {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ñ–ª–∞–≥ awaitingAccessKey —É–∂–µ —Å–±—Ä–æ—à–µ–Ω –≤ handleAccessKeyInput
        return;
      } else {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞, –ø—Ä–æ—Å–∏–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        await ctx.reply('üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –µ—â–µ —Ä–∞–∑:');
        return;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!ctx.user) {
      await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageText = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
    
    if (!messageText) {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await ctx.sendChatAction('typing');

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const messageData: any = {
        userId: ctx.user.id,
        content: messageText,
        role: 'USER',
      };
      
      if (ctx.message?.message_id) {
        messageData.messageId = ctx.message.message_id;
      }
      
      await DatabaseService.createMessage(messageData);

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const maxContextMessages = parseInt(
        (await DatabaseService.getSetting('max_context_messages'))?.value || '20'
      );
      
      const recentMessages = await DatabaseService.getUserMessages(
        ctx.user.id,
        maxContextMessages
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–∞
      const messages: AIMessage[] = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      messages.push({
        role: 'system',
        content: `–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç–µ, —É–∫–∞–∂–∏ —ç—Ç–æ –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ.`
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã)
      recentMessages.reverse().forEach(msg => {
        messages.push({
          role: msg.role.toLowerCase() as 'user' | 'assistant' | 'system',
          content: msg.content
        });
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI —Å–µ—Ä–≤–∏—Å
      const response = await AIService.sendMessage(messages);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª
      const shouldCreateFile = response.content.length > 4000 || 
                              response.content.includes('```') ||
                              response.content.toLowerCase().includes('—Å–æ–∑–¥–∞–º —Ñ–∞–π–ª') ||
                              response.content.toLowerCase().includes('—Å–æ—Ö—Ä–∞–Ω—é –≤ —Ñ–∞–π–ª');

      let fileUrl: string | undefined;
      let fileName: string | undefined;
      let fileType: string | undefined;

      if (shouldCreateFile) {
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–æ–º
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        fileName = `response_${timestamp}.txt`;
        const filePath = path.join(process.cwd(), 'uploads', fileName);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const uploadsDir = path.join(process.cwd(), 'uploads');
        if (!fs.existsSync(uploadsDir)) {
          fs.mkdirSync(uploadsDir, { recursive: true });
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        fs.writeFileSync(filePath, response.content, 'utf8');
        
        fileUrl = filePath;
        fileType = 'text/plain';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const caption = `üìÑ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n\nüí¨ –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n${response.content.substring(0, 500)}${response.content.length > 500 ? '...' : ''}`;
        
        try {
          await ctx.replyWithDocument(
            { source: filePath, filename: fileName },
            {
              caption,
              parse_mode: 'Markdown'
            }
          );
        } catch (error) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
          if (error instanceof Error && error.message.includes("can't parse entities")) {
            await ctx.replyWithDocument(
              { source: filePath, filename: fileName },
              { caption }
            );
          } else {
            throw error;
          }
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ (–ª–∏–º–∏—Ç Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        const maxMessageLength = 4000;
        if (response.content.length <= maxMessageLength) {
          await sendMessageWithFallback(ctx, response.content);
        } else {
          const chunks = splitMessage(response.content, maxMessageLength);
          for (let i = 0; i < chunks.length; i++) {
            const chunk = chunks[i];
            const prefix = i === 0 ? '' : `üìÑ –ß–∞—Å—Ç—å ${i + 1}/${chunks.length}:\n\n`;
            await sendMessageWithFallback(ctx, prefix + chunk);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if (i < chunks.length - 1) {
              await new Promise(resolve => setTimeout(resolve, 500));
            }
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const assistantMessageData: any = {
        userId: ctx.user.id,
        content: response.content,
        role: 'ASSISTANT',
        tokens: response.usage.totalTokens,
        cost: AIService.calculateCost(
          response.usage.promptTokens,
          response.usage.completionTokens,
          response.model,
          response.provider
        ),
      };
      
      if (fileUrl) {
        assistantMessageData.fileUrl = fileUrl;
      }
      if (fileName) {
        assistantMessageData.fileName = fileName;
      }
      if (fileType) {
        assistantMessageData.fileType = fileType;
      }
      
      await DatabaseService.createMessage(assistantMessageData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await DatabaseService.createUsage({
        userId: ctx.user.id,
        tokens: response.usage.totalTokens,
        cost: AIService.calculateCost(
          response.usage.promptTokens,
          response.usage.completionTokens,
          response.model,
          response.provider
        ),
        model: response.model,
        requestType: 'text',
      });

      logger.info('Message processed successfully', {
        userId: ctx.user.id,
        telegramId: ctx.user.telegramId.toString(),
        messageLength: messageText.length,
        responseLength: response.content.length,
        tokens: response.usage.totalTokens,
        model: response.model,
        fileCreated: !!fileUrl,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error processing message with OpenRouter', {
        error: error instanceof Error ? error.message : 'Unknown error',
        userId: ctx.user.id,
        telegramId: ctx.user.telegramId.toString(),
        messageText: messageText.substring(0, 100)
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.';
      
      if (error instanceof Error) {
        if (error.message.includes('Rate limit')) {
          errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
        } else if (error.message.includes('Invalid OpenRouter API key')) {
          errorMessage = 'üîë –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (error.message.includes('service is temporarily unavailable')) {
          errorMessage = 'üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        } else if (error.message.includes('Bad request')) {
          errorMessage = 'üìù –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.';
        }
      }

      await ctx.reply(errorMessage);
    }
    
  } catch (error) {
    logger.error('Error in messageHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown
async function sendMessageWithFallback(ctx: BotContext, text: string): Promise<void> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown
    await ctx.reply(text, { parse_mode: 'Markdown' });
  } catch (error) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (error instanceof Error && error.message.includes("can't parse entities")) {
      logger.warn('Markdown parsing failed, sending as plain text', {
        error: error.message,
        textLength: text.length
      });
      await ctx.reply(text);
    } else {
      // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
      throw error;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏
function splitMessage(text: string, maxLength: number): string[] {
  if (text.length <= maxLength) {
    return [text];
  }

  const chunks: string[] = [];
  let currentChunk = '';
  const lines = text.split('\n');

  for (const line of lines) {
    if (currentChunk.length + line.length + 1 <= maxLength) {
      currentChunk += (currentChunk ? '\n' : '') + line;
    } else {
      if (currentChunk) {
        chunks.push(currentChunk);
        currentChunk = '';
      }
      
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–∞–º–∞ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–µ
      if (line.length > maxLength) {
        const words = line.split(' ');
        let currentLine = '';
        
        for (const word of words) {
          if (currentLine.length + word.length + 1 <= maxLength) {
            currentLine += (currentLine ? ' ' : '') + word;
          } else {
            if (currentLine) {
              chunks.push(currentLine);
              currentLine = word;
            } else {
              // –°–ª–æ–≤–æ —Å–∞–º–æ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞
              chunks.push(word.substring(0, maxLength));
              currentLine = word.substring(maxLength);
            }
          }
        }
        
        if (currentLine) {
          currentChunk = currentLine;
        }
      } else {
        currentChunk = line;
      }
    }
  }

  if (currentChunk) {
    chunks.push(currentChunk);
  }

  return chunks;
}
