import { BotContext } from '../middleware/auth';
import { DatabaseService } from '../../services/database';
import { logger } from '../../utils/logger';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞
export const handleAccessRequest = async (ctx: BotContext, callbackData: string) => {
  try {
    const telegramId = BigInt(ctx.from!.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await DatabaseService.findUserByTelegramId(telegramId);
    if (existingUser) {
      await ctx.answerCbQuery('‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userInfo = {
      telegramId: telegramId.toString(),
      username: ctx.from?.username || '–Ω–µ —É–∫–∞–∑–∞–Ω',
      firstName: ctx.from?.first_name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      lastName: ctx.from?.last_name || '',
      fullName: `${ctx.from?.first_name || ''} ${ctx.from?.last_name || ''}`.trim() || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
    };

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const admins = await DatabaseService.getClient().user.findMany({
      where: { isAdmin: true, isActive: true }
    });

    if (admins.length === 0) {
      await ctx.answerCbQuery('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      await ctx.reply('‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const requestMessage = `üîî <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø</b>

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>
‚Ä¢ ID: <code>${userInfo.telegramId}</code>
‚Ä¢ –ò–º—è: ${userInfo.fullName}
‚Ä¢ Username: ${userInfo.username !== '–Ω–µ —É–∫–∞–∑–∞–Ω' ? `@${userInfo.username}` : userInfo.username}

üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞:</b> ${new Date().toLocaleString('ru-RU')}

üí° <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –î–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π /generate_key
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    let notifiedAdmins = 0;
    for (const admin of admins) {
      try {
        await ctx.telegram.sendMessage(
          admin.telegramId.toString(),
          requestMessage,
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á',
                    callback_data: 'admin_generate_key'
                  },
                  {
                    text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                    callback_data: 'admin_list_users'
                  }
                ],
                [
                  {
                    text: `üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`,
                    url: userInfo.username !== '–Ω–µ —É–∫–∞–∑–∞–Ω' ? 
                         `https://t.me/${userInfo.username}` : 
                         `tg://user?id=${userInfo.telegramId}`
                  }
                ]
              ]
            }
          }
        );
        notifiedAdmins++;
      } catch (error) {
        logger.warn('Failed to notify admin about access request', {
          adminId: admin.id,
          adminTelegramId: admin.telegramId.toString(),
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }

    await ctx.answerCbQuery('‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const confirmationMessage = `‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>

üì® –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–∏—Å—Ç–µ–º—ã.

‚è±Ô∏è <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á

üïê <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> –æ–±—ã—á–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤

üí° <b>–°–æ–≤–µ—Ç:</b> —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ—Ç –±–æ—Ç–∞`;

    await ctx.editMessageText(confirmationMessage, { 
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ',
              callback_data: 'request_access'
            }
          ],
          [
            {
              text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
              callback_data: 'close_message'
            }
          ]
        ]
      }
    });

    logger.info('Access request sent to admins', {
      requesterTelegramId: userInfo.telegramId,
      requesterUsername: userInfo.username,
      requesterName: userInfo.fullName,
      notifiedAdmins,
      totalAdmins: admins.length,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Error in handleAccessRequest', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
      callbackData
    });

    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
export const handleCloseMessage = async (ctx: BotContext) => {
  try {
    await ctx.deleteMessage();
    await ctx.answerCbQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  } catch (error) {
    await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
  }
};
