import { BotContext } from '../middleware/auth';
import { OpenRouterService } from '../../services/openrouter';
import { DatabaseService } from '../../services/database';
import { logger } from '../../utils/logger';

export const balanceHandler = async (ctx: BotContext) => {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }

    const loadingMessage = await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç OpenRouter
      const openRouterBalance = await OpenRouterService.getBalance();
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const totalUsage = await DatabaseService.getTotalUsage();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      const monthlyUsage = await DatabaseService.getTotalUsage(thirtyDaysAgo);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const todayUsage = await DatabaseService.getTotalUsage(today);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
      await ctx.deleteMessage(loadingMessage.message_id);

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞
      const credits = openRouterBalance.credits || 0;
      const usage = openRouterBalance.usage || 0;
      const remaining = credits - usage;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
      const balanceMessage = `üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã</b>

üîë <b>OpenRouter API:</b>
üí≥ –ö—Ä–µ–¥–∏—Ç—ã: $${credits.toFixed(4)}
üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $${usage.toFixed(4)}
üíµ –û—Å—Ç–∞—Ç–æ–∫: $${remaining.toFixed(4)}

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>

üìÖ <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
üéØ –ó–∞–ø—Ä–æ—Å–æ–≤: ${todayUsage._count.id || 0}
üî§ –¢–æ–∫–µ–Ω–æ–≤: ${todayUsage._sum.tokens || 0}
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${(todayUsage._sum.cost || 0).toFixed(4)}

üìÜ <b>–ó–∞ 30 –¥–Ω–µ–π:</b>
üéØ –ó–∞–ø—Ä–æ—Å–æ–≤: ${monthlyUsage._count.id || 0}
üî§ –¢–æ–∫–µ–Ω–æ–≤: ${monthlyUsage._sum.tokens || 0}
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${(monthlyUsage._sum.cost || 0).toFixed(4)}

üìä <b>–í—Å–µ–≥–æ –∑–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
üéØ –ó–∞–ø—Ä–æ—Å–æ–≤: ${totalUsage._count.id || 0}
üî§ –¢–æ–∫–µ–Ω–æ–≤: ${totalUsage._sum.tokens || 0}
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${(totalUsage._sum.cost || 0).toFixed(4)}

‚ö° <b>–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞:</b>
üìÖ –°–µ–≥–æ–¥–Ω—è: $${todayUsage._count.id ? ((todayUsage._sum.cost || 0) / todayUsage._count.id).toFixed(6) : '0.000000'}
üìÜ –ó–∞ –º–µ—Å—è—Ü: $${monthlyUsage._count.id ? ((monthlyUsage._sum.cost || 0) / monthlyUsage._count.id).toFixed(6) : '0.000000'}
üìä –û–±—â–∞—è: $${totalUsage._count.id ? ((totalUsage._sum.cost || 0) / totalUsage._count.id).toFixed(6) : '0.000000'}`;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∞
      let statusIcon = '‚úÖ';
      let statusMessage = '';

      if (remaining < 1) {
        statusIcon = 'üî¥';
        statusMessage = '\n\nüö® <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–∞–ª–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π!';
      } else if (remaining < 5) {
        statusIcon = 'üü°';
        statusMessage = '\n\n‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b> –ë–∞–ª–∞–Ω—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∏–∑–∫–∏–º.';
      } else if (remaining < 10) {
        statusIcon = 'üü†';
        statusMessage = '\n\nüí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.';
      }

      const finalMessage = `${statusIcon} ${balanceMessage}${statusMessage}`;

      await ctx.reply(finalMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
                callback_data: 'balance_refresh'
              },
              {
                text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                callback_data: 'balance_detailed'
              }
            ],
            [
              {
                text: 'üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                callback_data: 'balance_users_stats'
              }
            ],
            [
              {
                text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
                callback_data: 'balance_close'
              }
            ]
          ]
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–∞
      logger.info('Balance checked', {
        adminId: ctx.user.id,
        openRouterCredits: credits,
        openRouterUsage: usage,
        remainingBalance: remaining,
        totalRequests: totalUsage._count.id,
        totalCost: totalUsage._sum.cost,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        await ctx.deleteMessage(loadingMessage.message_id);
      } catch (deleteError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      }

      logger.error('Failed to get balance information', {
        error: error instanceof Error ? error.message : 'Unknown error',
        adminId: ctx.user.id,
        telegramId: ctx.user.telegramId.toString()
      });

      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenRouter API\n‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ä–≤–∏—Å–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }

  } catch (error) {
    logger.error('Error in balanceHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
export const handleBalanceCallbacks = async (ctx: BotContext, callbackData: string) => {
  try {
    const parts = callbackData.split('_');
    
    if (parts[0] !== 'balance') return;

    await ctx.answerCbQuery();

    switch (parts[1]) {
      case 'refresh':
        await ctx.deleteMessage();
        await balanceHandler(ctx);
        break;

      case 'detailed':
        await ctx.deleteMessage();
        await showDetailedStats(ctx);
        break;

      case 'users':
        if (parts[2] === 'stats') {
          await ctx.deleteMessage();
          await showUsersStats(ctx);
        }
        break;

      case 'close':
        await ctx.deleteMessage();
        await ctx.reply('üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫—Ä—ã—Ç–∞.');
        break;

      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        break;
    }

  } catch (error) {
    logger.error('Error in handleBalanceCallbacks', {
      error: error instanceof Error ? error.message : 'Unknown error',
      callbackData,
      userId: ctx.user?.id
    });
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const showDetailedStats = async (ctx: BotContext) => {
  try {
    const loadingMessage = await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    const periods = [
      { name: '–°–µ–≥–æ–¥–Ω—è', days: 0 },
      { name: '–í—á–µ—Ä–∞', days: 1 },
      { name: '7 –¥–Ω–µ–π', days: 7 },
      { name: '30 –¥–Ω–µ–π', days: 30 },
      { name: '90 –¥–Ω–µ–π', days: 90 }
    ];

    const stats = [];
    for (const period of periods) {
      let startDate: Date | undefined;
      let endDate: Date | undefined;

      if (period.days === 0) {
        // –°–µ–≥–æ–¥–Ω—è
        startDate = new Date();
        startDate.setHours(0, 0, 0, 0);
      } else if (period.days === 1) {
        // –í—á–µ—Ä–∞
        startDate = new Date();
        startDate.setDate(startDate.getDate() - 1);
        startDate.setHours(0, 0, 0, 0);
        endDate = new Date();
        endDate.setDate(endDate.getDate() - 1);
        endDate.setHours(23, 59, 59, 999);
      } else {
        // –î—Ä—É–≥–∏–µ –ø–µ—Ä–∏–æ–¥—ã
        startDate = new Date();
        startDate.setDate(startDate.getDate() - period.days);
      }

      const usage = await DatabaseService.getTotalUsage(startDate, endDate);
      stats.push({
        period: period.name,
        requests: usage._count.id || 0,
        tokens: usage._sum.tokens || 0,
        cost: usage._sum.cost || 0
      });
    }

    await ctx.deleteMessage(loadingMessage.message_id);

    let message = `üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n`;

    stats.forEach(stat => {
      const avgCost = stat.requests > 0 ? (stat.cost / stat.requests).toFixed(6) : '0.000000';
      message += `üìÖ <b>${stat.period}:</b>\n`;
      message += `   üéØ –ó–∞–ø—Ä–æ—Å–æ–≤: ${stat.requests}\n`;
      message += `   üî§ –¢–æ–∫–µ–Ω–æ–≤: ${stat.tokens}\n`;
      message += `   üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: $${stat.cost.toFixed(4)}\n`;
      message += `   üìà –°—Ä–µ–¥–Ω—è—è: $${avgCost}\n\n`;
    });

    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É',
              callback_data: 'balance_refresh'
            }
          ],
          [
            {
              text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
              callback_data: 'balance_close'
            }
          ]
        ]
      }
    });

  } catch (error) {
    logger.error('Error in showDetailedStats', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const showUsersStats = async (ctx: BotContext) => {
  try {
    const loadingMessage = await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    const users = await DatabaseService.getAllUsers();
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const activeUsersCount = await DatabaseService.getActiveUsersCount(30);

    await ctx.deleteMessage(loadingMessage.message_id);

    let message = `üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n`;
    message += `üìä <b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n`;
    message += `üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`;
    message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): ${activeUsersCount}\n`;
    message += `üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${users.filter(u => u.isAdmin).length}\n\n`;

    // –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    const topUsers = users
      .filter(u => u._count.messages > 0)
      .sort((a, b) => b._count.messages - a._count.messages)
      .slice(0, 5);

    if (topUsers.length > 0) {
      message += `üèÜ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n`;
      topUsers.forEach((user, index) => {
        const userName = user.username ? `@${user.username}` : 
                        `${user.firstName || ''} ${user.lastName || ''}`.trim() || 
                        `ID: ${user.telegramId}`;
        message += `${index + 1}. ${userName}\n`;
        message += `   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${user._count.messages}\n`;
        message += `   üìä –ó–∞–ø—Ä–æ—Å–æ–≤: ${user._count.usage}\n\n`;
      });
    }

    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É',
              callback_data: 'balance_refresh'
            }
          ],
          [
            {
              text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
              callback_data: 'balance_close'
            }
          ]
        ]
      }
    });

  } catch (error) {
    logger.error('Error in showUsersStats', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
  }
};
