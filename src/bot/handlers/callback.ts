import { BotContext } from '../middleware/auth';
import { logger } from '../../utils/logger';
import { adminCallbackHandler } from './admin';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ help
const handleHelpCallbacks = async (ctx: BotContext, callbackData: string) => {
  try {
    switch (callbackData) {
      case 'help_admin_panel':
        await ctx.answerCbQuery('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        const { adminHandler } = await import('./admin');
        await adminHandler(ctx);
        break;

      case 'help_generate_key':
        await ctx.answerCbQuery('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á...');
        const { generateKeyHandler } = await import('./generateKey');
        await generateKeyHandler(ctx);
        break;

      case 'help_list_keys':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...');
        const { listKeysHandler } = await import('./listKeys');
        await listKeysHandler(ctx);
        break;

      case 'help_status':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å...');
        const { statusHandler } = await import('./status');
        await statusHandler(ctx);
        break;

      case 'help_clear':
        await ctx.answerCbQuery('üîÑ –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é...');
        const { clearHandler } = await import('./clear');
        await clearHandler(ctx);
        break;

      case 'help_start_auth':
        await ctx.answerCbQuery('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        const { startHandler } = await import('./start');
        await startHandler(ctx);
        break;

      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        break;
    }
  } catch (error) {
    logger.error('Error in handleHelpCallbacks', {
      error: error instanceof Error ? error.message : 'Unknown error',
      callbackData,
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
  }
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
export const callbackHandler = async (ctx: BotContext) => {
  try {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      return;
    }

    const callbackData = ctx.callbackQuery.data;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    if (callbackData.startsWith('admin_')) {
      await adminCallbackHandler(ctx);
      return;
    }


    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    if (callbackData === 'list_all_keys') {
      await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...');
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      const { listKeysHandler } = await import('./listKeys');
      await listKeysHandler(ctx);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –∏–∑ help
    if (callbackData.startsWith('help_')) {
      await handleHelpCallbacks(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    if (callbackData.startsWith('keys_')) {
      const { handleKeysCallbacks } = await import('./listKeys');
      await handleKeysCallbacks(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    if (callbackData.startsWith('balance_')) {
      const { handleBalanceCallbacks } = await import('./balance');
      await handleBalanceCallbacks(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞
    if (callbackData === 'request_access') {
      const { handleAccessRequest } = await import('./accessRequest');
      await handleAccessRequest(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
    if (callbackData === 'enter_access_key') {
      await ctx.answerCbQuery('üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞');
      ctx.session.awaitingAccessKey = true;
      ctx.awaitingAccessKey = true;
      
      const keyInputMessage = `üîë <b>–í–≤–æ–¥ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

üìù <b>–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:</b> ACK_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

üí° <b>–°–æ–≤–µ—Ç:</b> —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –ø–æ–ª–Ω–æ—Å—Ç—å—é, –≤–∫–ª—é—á–∞—è –ø—Ä–µ—Ñ–∏–∫—Å ACK_`;

      await ctx.editMessageText(keyInputMessage, { 
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É',
                callback_data: 'back_to_start'
              }
            ]
          ]
        }
      });
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Å—Ç—É–ø–µ
    if (callbackData === 'access_help') {
      await ctx.answerCbQuery('üìñ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É');
      
      const helpMessage = `‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–∞</b>

üîë <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞?</b>
–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ AI —á–∞—Ç-–±–æ—Ç—É.

üìù <b>–§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞:</b>
‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ACK_
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç 36 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü—Ä–∏–º–µ—Ä: ACK_1234567890abcdef1234567890abcdef

üì® <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á?</b>
1. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø"
2. –í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞—Å—Ç –∫–ª—é—á
4. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

‚è±Ô∏è <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b>
–û–±—ã—á–Ω–æ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

üîß <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–æ–º?</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;

      await ctx.editMessageText(helpMessage, { 
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üì® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø',
                callback_data: 'request_access'
              }
            ],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É',
                callback_data: 'back_to_start'
              }
            ]
          ]
        }
      });
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—á–∞–ª—É
    if (callbackData === 'back_to_start') {
      await ctx.answerCbQuery('üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É');
      const { startHandler } = await import('./start');
      await ctx.deleteMessage();
      await startHandler(ctx);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (callbackData === 'close_message') {
      const { handleCloseMessage } = await import('./accessRequest');
      await handleCloseMessage(ctx);
      return;
    }

    // –ï—Å–ª–∏ callback-–∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    
    logger.warn('Unknown callback query', {
      callbackData,
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

  } catch (error) {
    logger.error('Error in callbackHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id,
      callbackData: ctx.callbackQuery && 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : 'unknown'
    });

    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
  }
};
