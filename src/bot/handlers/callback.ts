import { BotContext } from '../middleware/auth';
import { logger } from '../../utils/logger';
import { adminCallbackHandler } from './admin';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ help
const handleHelpCallbacks = async (ctx: BotContext, callbackData: string) => {
  try {
    switch (callbackData) {
      case 'help_admin_panel':
        await ctx.answerCbQuery('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        const { adminHandler } = await import('./admin');
        await adminHandler(ctx);
        break;

      case 'help_generate_key':
        await ctx.answerCbQuery('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á...');
        const { generateKeyHandler } = await import('./generateKey');
        await generateKeyHandler(ctx);
        break;

      case 'help_list_keys':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...');
        const { listKeysHandler } = await import('./listKeys');
        await listKeysHandler(ctx);
        break;

      case 'help_status':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å...');
        const { statusHandler } = await import('./status');
        await statusHandler(ctx);
        break;

      case 'help_clear':
        await ctx.answerCbQuery('üîÑ –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é...');
        const { clearHandler } = await import('./clear');
        await clearHandler(ctx);
        break;

      case 'help_start_auth':
        await ctx.answerCbQuery('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
        const { startHandler } = await import('./start');
        await startHandler(ctx);
        break;

      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        break;
    }
  } catch (error) {
    logger.error('Error in handleHelpCallbacks', {
      error: error instanceof Error ? error.message : 'Unknown error',
      callbackData,
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
  }
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
export const callbackHandler = async (ctx: BotContext) => {
  try {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      return;
    }

    const callbackData = ctx.callbackQuery.data;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    if (callbackData.startsWith('admin_')) {
      await adminCallbackHandler(ctx);
      return;
    }


    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    if (callbackData === 'list_all_keys') {
      await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...');
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      const { listKeysHandler } = await import('./listKeys');
      await listKeysHandler(ctx);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –∏–∑ help
    if (callbackData.startsWith('help_')) {
      await handleHelpCallbacks(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    if (callbackData.startsWith('keys_')) {
      const { handleKeysCallbacks } = await import('./listKeys');
      await handleKeysCallbacks(ctx, callbackData);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    if (callbackData.startsWith('balance_')) {
      const { handleBalanceCallbacks } = await import('./balance');
      await handleBalanceCallbacks(ctx, callbackData);
      return;
    }

    // –ï—Å–ª–∏ callback-–∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    
    logger.warn('Unknown callback query', {
      callbackData,
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

  } catch (error) {
    logger.error('Error in callbackHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id,
      callbackData: ctx.callbackQuery && 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : 'unknown'
    });

    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
  }
};
