import { BotContext } from '../middleware/auth';
import { logger } from '../../utils/logger';
import { DatabaseService } from '../../services/database';

export const audioHandler = async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!ctx.user) {
      await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if (!ctx.message || !('voice' in ctx.message) && !('audio' in ctx.message)) {
      await ctx.reply('‚ùå –ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const audioFile = 'voice' in ctx.message ? ctx.message.voice : ctx.message.audio;
    
    if (!audioFile) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ.');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const audioInfo = {
      duration: audioFile.duration || 0,
      fileSize: audioFile.file_size || 0,
      mimeType: audioFile.mime_type || 'audio/ogg',
      isVoice: 'voice' in ctx.message
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const messageData: any = {
      userId: ctx.user.id,
      content: `[–ê–£–î–ò–û–°–û–û–ë–©–ï–ù–ò–ï] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audioInfo.duration}—Å, –†–∞–∑–º–µ—Ä: ${(audioInfo.fileSize / 1024).toFixed(1)}KB`,
      role: 'USER',
      fileName: audioInfo.isVoice ? 'voice_message.ogg' : 'audio_file',
      fileType: audioInfo.mimeType,
    };
    
    if (ctx.message?.message_id) {
      messageData.messageId = ctx.message.message_id;
    }
    
    await DatabaseService.createMessage(messageData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const responseText = `üéµ <b>–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ</b>

üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b>
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${audioInfo.duration} —Å–µ–∫.
üì¶ –†–∞–∑–º–µ—Ä: ${(audioInfo.fileSize / 1024).toFixed(1)} KB
üéß –¢–∏–ø: ${audioInfo.mimeType}
${audioInfo.isVoice ? 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' : 'üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª'}

‚ùå <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.

üí° <b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè`;

    await ctx.reply(responseText, { parse_mode: 'HTML' });

    logger.info('Audio message received (not processed)', {
      userId: ctx.user.id,
      telegramId: ctx.user.telegramId.toString(),
      duration: audioInfo.duration,
      fileSize: audioInfo.fileSize,
      mimeType: audioInfo.mimeType,
      isVoice: audioInfo.isVoice,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    logger.error('Error in audioHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  }
};
