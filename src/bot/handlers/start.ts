import { BotContext } from '../middleware/auth';
import { DatabaseService } from '../../services/database';
import { logger } from '../../utils/logger';

export const startHandler = async (ctx: BotContext) => {
  try {
    const telegramId = BigInt(ctx.from!.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const existingUser = await DatabaseService.findUserByTelegramId(telegramId);
    
    if (existingUser) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      if (!existingUser.isActive) {
        await ctx.reply('‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.');
        return;
      }
      
      if (!existingUser.accessKey.isActive) {
        await ctx.reply('‚ùå –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.');
        return;
      }
      
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${existingUser.firstName || existingUser.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

ü§ñ –Ø AI —á–∞—Ç-–±–æ—Ç, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
‚Ä¢ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞

${existingUser.isAdmin ? '\nüîß *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n‚Ä¢ /generate_key - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞\n‚Ä¢ /list_keys - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π\n‚Ä¢ /list_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ /analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' : ''}

üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!`;

      await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
      
      logger.info('Existing user started bot', {
        userId: existingUser.id,
        telegramId: telegramId.toString(),
        username: existingUser.username
      });
      
      return;
    }
    
    // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
    ctx.session.awaitingAccessKey = true;
    ctx.awaitingAccessKey = true;
    
    const registrationMessage = `üîê *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI —á–∞—Ç-–±–æ—Ç!*

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.

üìù *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:*
1. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
3. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É

üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:`;

    await ctx.reply(registrationMessage, { parse_mode: 'Markdown' });
    
    logger.info('New user started registration process', {
      telegramId: telegramId.toString(),
      username: ctx.from?.username,
      firstName: ctx.from?.first_name
    });
    
  } catch (error) {
    logger.error('Error in startHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
      username: ctx.from?.username
    });
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const handleAccessKeyInput = async (ctx: BotContext, accessKey: string) => {
  try {
    const telegramId = BigInt(ctx.from!.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    if (!accessKey.startsWith('ACK_') || accessKey.length !== 36) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "ACK_" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 36 —Å–∏–º–≤–æ–ª–æ–≤.');
      return false;
    }
    
    // –ò—â–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const foundKey = await DatabaseService.findAccessKeyByKey(accessKey);
    
    if (!foundKey) {
      await ctx.reply('‚ùå –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return false;
    }
    
    if (!foundKey.isActive) {
      await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª—é—á
    const existingUserWithKey = await DatabaseService.getClient().user.findFirst({
      where: { accessKeyId: foundKey.id }
    });
    
    if (existingUserWithKey) {
      await ctx.reply('‚ùå –î–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData: {
      telegramId: bigint;
      username?: string;
      firstName?: string;
      lastName?: string;
      accessKeyId: string;
      isAdmin?: boolean;
    } = {
      telegramId,
      accessKeyId: foundKey.id,
      isAdmin: false
    };

    if (ctx.from?.username) {
      userData.username = ctx.from.username;
    }
    if (ctx.from?.first_name) {
      userData.firstName = ctx.from.first_name;
    }
    if (ctx.from?.last_name) {
      userData.lastName = ctx.from.last_name;
    }

    const newUser = await DatabaseService.createUser(userData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á - –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await DatabaseService.updateAccessKey(foundKey.id, {
      usedAt: new Date()
    });
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const welcomeMessage = `‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${newUser.firstName || newUser.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

ü§ñ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ AI —á–∞—Ç-–±–æ—Ç—É.

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
‚Ä¢ /balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞

üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É!

üéâ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!`;

    await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.awaitingAccessKey = false;
    ctx.awaitingAccessKey = false;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user = {
      id: newUser.id,
      telegramId: newUser.telegramId,
      isAdmin: newUser.isAdmin,
      accessKeyId: newUser.accessKeyId
    };
    ctx.user = ctx.session.user;
    
    logger.info('New user registered successfully', {
      userId: newUser.id,
      telegramId: telegramId.toString(),
      username: newUser.username,
      accessKeyId: foundKey.id,
      accessKey: foundKey.key
    });
    
    return true;
    
  } catch (error) {
    logger.error('Error in handleAccessKeyInput', {
      error: error instanceof Error ? error.message : 'Unknown error',
      telegramId: ctx.from?.id,
      accessKey
    });
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    return false;
  }
};
