import { BotContext } from '../middleware/auth';
import { DatabaseService } from '../../services/database';
import { logger } from '../../utils/logger';

export const deactivateKeyHandler = async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!ctx.user?.isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
    const activeKeys = await DatabaseService.getClient().accessKey.findMany({
      where: { isActive: true },
      include: {
        users: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
            telegramId: true,
            isActive: true,
            createdAt: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });

    if (activeKeys.length === 0) {
      await ctx.reply('üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª—é—á–µ–π
    let message = `üîë <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞</b>\n\n`;
    message += `üìä <b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π:</b> ${activeKeys.length}\n\n`;

    const keyButtons: any[][] = [];
    
    activeKeys.forEach((key, index) => {
      const user = key.users[0]; // –û–¥–∏–Ω –∫–ª—é—á = –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const keyShort = `${key.key.substring(0, 8)}...${key.key.substring(-4)}`;
      const createdDate = key.createdAt.toLocaleDateString('ru-RU');
      const usedDate = key.usedAt ? key.usedAt.toLocaleDateString('ru-RU') : '–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω';
      
      message += `üî∏ <b>–ö–ª—é—á ${index + 1}:</b>\n`;
      message += `   ‚Ä¢ ID: <code>${key.id}</code>\n`;
      message += `   ‚Ä¢ –ö–ª—é—á: <code>${keyShort}</code>\n`;
      message += `   ‚Ä¢ –°–æ–∑–¥–∞–Ω: ${createdDate}\n`;
      message += `   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: ${usedDate}\n`;
      
      if (user) {
        const userName = user.firstName || user.username || `ID: ${user.telegramId}`;
        const userStatus = user.isActive ? '‚úÖ –∞–∫—Ç–∏–≤–µ–Ω' : '‚ùå –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
        message += `   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} (${userStatus})\n`;
      } else {
        message += `   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n`;
      }
      message += '\n';

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
      keyButtons.push([
        {
          text: `üîí –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á ${index + 1}`,
          callback_data: `deactivate_key_${key.id}`
        }
      ]);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user) {
        keyButtons.push([
          {
            text: `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${index + 1}`,
            callback_data: `delete_user_${user.id}`
          }
        ]);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyButtons.push([
      {
        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫',
        callback_data: 'refresh_deactivate_keys'
      }
    ]);

    keyButtons.push([
      {
        text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
        callback_data: 'admin_panel'
      }
    ]);

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const maxMessageLength = 4000;
    if (message.length <= maxMessageLength) {
      await ctx.reply(message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyButtons
        }
      });
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–∞—Å—Ç—è–º–∏
      await ctx.reply(message.substring(0, maxMessageLength), { parse_mode: 'HTML' });
      await ctx.reply('‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
          inline_keyboard: keyButtons
        }
      });
    }

    logger.info('Deactivate keys list shown', {
      adminId: ctx.user.id,
      adminTelegramId: ctx.user.telegramId.toString(),
      activeKeysCount: activeKeys.length,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Error in deactivateKeyHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
export const handleKeyDeactivation = async (ctx: BotContext, keyId: string) => {
  try {
    if (!ctx.user?.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
    const key = await DatabaseService.getClient().accessKey.findUnique({
      where: { id: keyId },
      include: {
        users: {
          select: {
            id: true,
            username: true,
            firstName: true,
            lastName: true,
            telegramId: true,
            isActive: true
          }
        }
      }
    });

    if (!key) {
      await ctx.answerCbQuery('‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (!key.isActive) {
      await ctx.answerCbQuery('‚ùå –ö–ª—é—á —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
    await DatabaseService.updateAccessKey(keyId, {
      isActive: false
    });

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (key.users.length > 0) {
      await DatabaseService.getClient().user.updateMany({
        where: { accessKeyId: keyId },
        data: { isActive: false }
      });
    }

    const user = key.users[0];
    const userName = user ? (user.firstName || user.username || `ID: ${user.telegramId}`) : '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
    const keyShort = `${key.key.substring(0, 8)}...${key.key.substring(-4)}`;

    await ctx.answerCbQuery('‚úÖ –ö–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmationMessage = `‚úÖ <b>–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>

üîë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ:</b>
‚Ä¢ ID: <code>${key.id}</code>
‚Ä¢ –ö–ª—é—á: <code>${keyShort}</code>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}

‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ö–ª—é—á –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚Ä¢ –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

üìÖ <b>–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:</b> ${new Date().toLocaleString('ru-RU')}`;

    await ctx.editMessageText(confirmationMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π',
              callback_data: 'refresh_deactivate_keys'
            }
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
              callback_data: 'admin_panel'
            }
          ]
        ]
      }
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (user && user.isActive) {
      try {
        await ctx.telegram.sendMessage(
          user.telegramId.toString(),
          `‚ùå <b>–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>

üîë –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

üìû <b>–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:</b>
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞

üìÖ <b>–î–∞—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> ${new Date().toLocaleString('ru-RU')}`,
          { parse_mode: 'HTML' }
        );
      } catch (notificationError) {
        logger.warn('Failed to notify user about key deactivation', {
          userId: user.id,
          userTelegramId: user.telegramId.toString(),
          error: notificationError instanceof Error ? notificationError.message : 'Unknown error'
        });
      }
    }

    logger.info('Access key deactivated', {
      keyId,
      keyShort,
      adminId: ctx.user.id,
      adminTelegramId: ctx.user.telegramId.toString(),
      affectedUsersCount: key.users.length,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Error in handleKeyDeactivation', {
      error: error instanceof Error ? error.message : 'Unknown error',
      keyId,
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const handleUserDeletion = async (ctx: BotContext, userId: string) => {
  try {
    if (!ctx.user?.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await DatabaseService.getClient().user.findUnique({
      where: { id: userId },
      include: {
        accessKey: true,
        messages: { take: 1 },
        usage: { take: 1 }
      }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const userName = user.firstName || user.username || `ID: ${user.telegramId}`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    const confirmationMessage = `‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>
‚Ä¢ ID: <code>${user.id}</code>
‚Ä¢ –ò–º—è: ${userName}
‚Ä¢ Telegram ID: <code>${user.telegramId}</code>
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${user.isActive ? '‚úÖ –∞–∫—Ç–∏–≤–µ–Ω' : '‚ùå –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleDateString('ru-RU')}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: ${user.messages.length > 0 ? '–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${user.usage.length > 0 ? '–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>
–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:
‚Ä¢ –ü–æ–ª–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?</b>`;

    await ctx.editMessageText(confirmationMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üóëÔ∏è –î–ê, –£–î–ê–õ–ò–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø',
              callback_data: `confirm_delete_user_${userId}`
            }
          ],
          [
            {
              text: '‚ùå –û—Ç–º–µ–Ω–∞',
              callback_data: 'refresh_deactivate_keys'
            }
          ]
        ]
      }
    });

    await ctx.answerCbQuery('‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è');

  } catch (error) {
    logger.error('Error in handleUserDeletion', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId,
      adminId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const handleUserDeletionConfirmation = async (ctx: BotContext, userId: string) => {
  try {
    if (!ctx.user?.isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const user = await DatabaseService.getClient().user.findUnique({
      where: { id: userId },
      include: {
        messages: true,
        usage: true
      }
    });

    if (!user) {
      await ctx.answerCbQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const userName = user.firstName || user.username || `ID: ${user.telegramId}`;
    const messagesCount = user.messages.length;
    const usageCount = user.usage.length;

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ (–µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω)
    if (user.isActive) {
      try {
        await ctx.telegram.sendMessage(
          user.telegramId.toString(),
          `‚ùå <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω</b>

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

üìû <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:</b>
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞

üìÖ <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è:</b> ${new Date().toLocaleString('ru-RU')}`,
          { parse_mode: 'HTML' }
        );
      } catch (notificationError) {
        logger.warn('Failed to notify user about account deletion', {
          userId: user.id,
          userTelegramId: user.telegramId.toString(),
          error: notificationError instanceof Error ? notificationError.message : 'Unknown error'
        });
      }
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    await DatabaseService.getClient().user.delete({
      where: { id: userId }
    });

    await ctx.answerCbQuery('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmationMessage = `‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>

üë§ <b>–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: ${userName}
‚Ä¢ ID: <code>${userId}</code>

üìä <b>–£–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}
‚Ä¢ –ó–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${usageCount}

üìÖ <b>–£–¥–∞–ª–µ–Ω:</b> ${new Date().toLocaleString('ru-RU')}

‚ö†Ô∏è <b>–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ</b>`;

    await ctx.editMessageText(confirmationMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π',
              callback_data: 'refresh_deactivate_keys'
            }
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
              callback_data: 'admin_panel'
            }
          ]
        ]
      }
    });

    logger.info('User deleted successfully', {
      deletedUserId: userId,
      deletedUserName: userName,
      deletedUserTelegramId: user.telegramId.toString(),
      messagesDeleted: messagesCount,
      usageRecordsDeleted: usageCount,
      adminId: ctx.user.id,
      adminTelegramId: ctx.user.telegramId.toString(),
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Error in handleUserDeletionConfirmation', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId,
      adminId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
export const handleDeactivateCallbacks = async (ctx: BotContext, callbackData: string) => {
  try {
    if (callbackData === 'refresh_deactivate_keys') {
      await ctx.answerCbQuery('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...');
      await deactivateKeyHandler(ctx);
      return;
    }

    if (callbackData.startsWith('deactivate_key_')) {
      const keyId = callbackData.replace('deactivate_key_', '');
      await handleKeyDeactivation(ctx, keyId);
      return;
    }

    if (callbackData.startsWith('delete_user_')) {
      const userId = callbackData.replace('delete_user_', '');
      await handleUserDeletion(ctx, userId);
      return;
    }

    if (callbackData.startsWith('confirm_delete_user_')) {
      const userId = callbackData.replace('confirm_delete_user_', '');
      await handleUserDeletionConfirmation(ctx, userId);
      return;
    }

    await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');

  } catch (error) {
    logger.error('Error in handleDeactivateCallbacks', {
      error: error instanceof Error ? error.message : 'Unknown error',
      callbackData,
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
};
