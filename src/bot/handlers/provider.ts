import { BotContext } from '../middleware/auth';
import { logger } from '../../utils/logger';
import { AIService, AIProvider } from '../../services/ai';

export const providerHandler = async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (!ctx.user || ctx.user.telegramId.toString() !== process.env['ADMIN_TELEGRAM_ID']) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    const args = ctx.message && 'text' in ctx.message 
      ? ctx.message.text.split(' ').slice(1) 
      : [];

    if (args.length === 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      await showProviderStatus(ctx);
      return;
    }

    const command = args[0]?.toLowerCase();

    switch (command) {
      case 'set':
        if (args.length < 2) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: /provider set openrouter|openai');
          return;
        }
        await setProvider(ctx, args[1] as AIProvider);
        break;

      case 'status':
        await showProviderStatus(ctx);
        break;

      case 'health':
        await checkProvidersHealth(ctx);
        break;

      case 'models':
        if (args.length < 2) {
          await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: /provider models openrouter|openai');
          return;
        }
        await showProviderModels(ctx, args[1] as AIProvider);
        break;

      default:
        await ctx.reply(
          '‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
          '‚Ä¢ `/provider` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n' +
          '‚Ä¢ `/provider set <provider>` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (openrouter|openai)\n' +
          '‚Ä¢ `/provider status` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n' +
          '‚Ä¢ `/provider health` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n' +
          '‚Ä¢ `/provider models <provider>` - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞'
        );
        break;
    }

  } catch (error) {
    logger.error('Error in providerHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
};

async function showProviderStatus(ctx: BotContext): Promise<void> {
  try {
    const currentProvider = AIService.getDefaultProvider();
    const healthStatus = await AIService.healthCheckAll();

    const statusMessage = 
      'ü§ñ **–°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤**\n\n' +
      `üìç **–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** ${currentProvider}\n\n` +
      'üîç **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:**\n' +
      `‚Ä¢ OpenRouter: ${healthStatus.openrouter ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n` +
      `‚Ä¢ OpenAI: ${healthStatus.openai ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n` +
      '‚öôÔ∏è **–ú–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**\n' +
      `‚Ä¢ OpenRouter: ${AIService.getDefaultModel('openrouter')}\n` +
      `‚Ä¢ OpenAI: ${AIService.getDefaultModel('openai')}`;

    await ctx.reply(statusMessage, { parse_mode: 'Markdown' });

  } catch (error) {
    logger.error('Error showing provider status', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.');
  }
}

async function setProvider(ctx: BotContext, provider: AIProvider): Promise<void> {
  try {
    if (provider !== 'openrouter' && provider !== 'openai') {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã: openrouter, openai');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const isAvailable = await AIService.isProviderAvailable(provider);
    if (!isAvailable) {
      await ctx.reply(`‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π.`);
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    AIService.setDefaultProvider(provider);

    await ctx.reply(
      `‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **${provider}**\n\n` +
      `üîß –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${AIService.getDefaultModel(provider)}`,
      { parse_mode: 'Markdown' }
    );

    logger.info('AI provider changed', {
      newProvider: provider,
      changedBy: ctx.user?.telegramId.toString(),
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Error setting provider', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.');
  }
}

async function checkProvidersHealth(ctx: BotContext): Promise<void> {
  try {
    await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');

    const healthStatus = await AIService.healthCheckAll();

    const healthMessage = 
      'üè• **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤**\n\n' +
      `üî∏ **OpenRouter:** ${healthStatus.openrouter ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n` +
      `üî∏ **OpenAI:** ${healthStatus.openai ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n` +
      `‚è∞ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

    await ctx.reply(healthMessage, { parse_mode: 'Markdown' });

  } catch (error) {
    logger.error('Error checking providers health', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.');
  }
}

async function showProviderModels(ctx: BotContext, provider: AIProvider): Promise<void> {
  try {
    if (provider !== 'openrouter' && provider !== 'openai') {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä. –î–æ—Å—Ç—É–ø–Ω—ã: openrouter, openai');
      return;
    }

    await ctx.reply(`üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è ${provider}...`);

    const models = await AIService.getModels(provider);
    
    if (models.length === 0) {
      await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è ${provider}`);
      return;
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const displayModels = models.slice(0, 20);
    const hasMore = models.length > 20;

    let modelsMessage = `ü§ñ **–ú–æ–¥–µ–ª–∏ ${provider}** (–ø–æ–∫–∞–∑–∞–Ω–æ ${displayModels.length} –∏–∑ ${models.length}):\n\n`;
    
    displayModels.forEach((model, index) => {
      const isDefault = model.id === AIService.getDefaultModel(provider);
      const defaultMark = isDefault ? ' ‚≠ê' : '';
      modelsMessage += `${index + 1}. \`${model.id}\`${defaultMark}\n`;
      
      if (model.description && model.description !== model.name) {
        modelsMessage += `   _${model.description.substring(0, 80)}${model.description.length > 80 ? '...' : ''}_\n`;
      }
      modelsMessage += '\n';
    });

    if (hasMore) {
      modelsMessage += `\nüìù –ò –µ—â–µ ${models.length - 20} –º–æ–¥–µ–ª–µ–π...`;
    }

    modelsMessage += '\n‚≠ê - –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é';

    await ctx.reply(modelsMessage, { parse_mode: 'Markdown' });

  } catch (error) {
    logger.error('Error showing provider models', error);
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è ${provider}.`);
  }
}
