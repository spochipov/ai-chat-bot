import { BotContext } from '../middleware/auth';
import { logger } from '../../utils/logger';

export const adminHandler = async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ middleware)
    if (!ctx.user) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }

    const adminMessage = `üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞!

üë§ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** ${ctx.user.id}
üìÖ **–í—Ä–µ–º—è –≤—Ö–æ–¥–∞:** ${new Date().toLocaleString('ru-RU')}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;

    await ctx.reply(adminMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞',
              callback_data: 'admin_generate_key'
            }
          ],
          [
            {
              text: 'üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π',
              callback_data: 'admin_list_keys'
            },
            {
              text: 'üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á',
              callback_data: 'admin_deactivate_key'
            }
          ],
          [
            {
              text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
              callback_data: 'admin_list_users'
            },
            {
              text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              callback_data: 'admin_user_stats'
            }
          ],
          [
            {
              text: 'üí∞ –ë–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã',
              callback_data: 'admin_balance'
            },
            {
              text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
              callback_data: 'admin_analytics'
            }
          ],
          [
            {
              text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å',
              callback_data: 'admin_close'
            }
          ]
        ]
      }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    logger.info('Admin panel accessed', {
      adminId: ctx.user.id,
      adminTelegramId: ctx.user.telegramId.toString(),
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Error in adminHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
export const adminCallbackHandler = async (ctx: BotContext) => {
  try {
    if (!ctx.callbackQuery || !('data' in ctx.callbackQuery)) {
      return;
    }

    const callbackData = ctx.callbackQuery.data;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    if (!callbackData.startsWith('admin_')) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!ctx.user || !ctx.user.isAdmin) {
      await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    const { generateKeyHandler } = await import('./generateKey');
    const { listKeysHandler } = await import('./listKeys');
    const { deactivateKeyHandler } = await import('./deactivateKey');
    const { listUsersHandler } = await import('./listUsers');
    const { userStatsHandler } = await import('./userStats');
    const { balanceHandler } = await import('./balance');
    const { analyticsHandler } = await import('./analytics');

    switch (callbackData) {
      case 'admin_generate_key':
        await ctx.answerCbQuery('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á...');
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é
        await ctx.deleteMessage();
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
        await generateKeyHandler(ctx);
        break;

      case 'admin_list_keys':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...');
        await ctx.deleteMessage();
        await listKeysHandler(ctx);
        break;

      case 'admin_deactivate_key':
        await ctx.answerCbQuery('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞...');
        await ctx.deleteMessage();
        await deactivateKeyHandler(ctx);
        break;

      case 'admin_list_users':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        await ctx.deleteMessage();
        await listUsersHandler(ctx);
        break;

      case 'admin_user_stats':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        await ctx.deleteMessage();
        await userStatsHandler(ctx);
        break;

      case 'admin_balance':
        await ctx.answerCbQuery('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å...');
        await ctx.deleteMessage();
        await balanceHandler(ctx);
        break;

      case 'admin_analytics':
        await ctx.answerCbQuery('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É...');
        await ctx.deleteMessage();
        await analyticsHandler(ctx);
        break;

      case 'admin_close':
        await ctx.answerCbQuery('‚úÖ –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞');
        await ctx.editMessageText('üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin');
        break;

      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        break;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    logger.info('Admin panel action', {
      action: callbackData,
      adminId: ctx.user.id,
      adminTelegramId: ctx.user.telegramId.toString(),
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error('Error in adminCallbackHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id,
      callbackData: ctx.callbackQuery && 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : 'unknown'
    });

    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
  }
};
