import { BotContext } from '../middleware/auth';
import { DatabaseService } from '../../services/database';
import { logger } from '../../utils/logger';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
interface KeysFilter {
  status?: 'all' | 'active' | 'inactive' | 'used' | 'unused';
  search?: string;
  page?: number;
  limit?: number;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
export const listKeysHandler = async (ctx: BotContext) => {
  try {
    if (!ctx.user) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }

    const filter: KeysFilter = {
      status: 'all',
      page: 1,
      limit: 5
    };

    await showKeysList(ctx, filter);

  } catch (error) {
    logger.error('Error in listKeysHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });

    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
const showKeysList = async (ctx: BotContext, filter: KeysFilter) => {
  try {
    const loadingMessage = await ctx.reply('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const allKeys = await DatabaseService.getAllAccessKeys();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    let filteredKeys = allKeys;

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (filter.status && filter.status !== 'all') {
      filteredKeys = filteredKeys.filter(key => {
        switch (filter.status) {
          case 'active':
            return key.isActive;
          case 'inactive':
            return !key.isActive;
          case 'used':
            return key.users.length > 0;
          case 'unused':
            return key.users.length === 0;
          default:
            return true;
        }
      });
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if (filter.search) {
      const searchTerm = filter.search.toLowerCase();
      filteredKeys = filteredKeys.filter(key => {
        const keyMatch = key.key.toLowerCase().includes(searchTerm);
        const userMatch = key.users.some(user => 
          user.username?.toLowerCase().includes(searchTerm) ||
          user.firstName?.toLowerCase().includes(searchTerm) ||
          user.lastName?.toLowerCase().includes(searchTerm)
        );
        return keyMatch || userMatch;
      });
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const totalKeys = filteredKeys.length;
    const totalPages = Math.ceil(totalKeys / (filter.limit || 5));
    const currentPage = filter.page || 1;
    const offset = ((currentPage - 1) * (filter.limit || 5));
    const paginatedKeys = filteredKeys.slice(offset, offset + (filter.limit || 5));

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await ctx.deleteMessage(loadingMessage.message_id);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üîë <b>–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞</b>\n\n`;
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    const statusLabels = {
      all: '–í—Å–µ',
      active: '–ê–∫—Ç–∏–≤–Ω—ã–µ',
      inactive: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ',
      used: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ',
      unused: '–°–≤–æ–±–æ–¥–Ω—ã–µ'
    };
    
    message += `üìä <b>–§–∏–ª—å—Ç—Ä:</b> ${statusLabels[filter.status || 'all']}\n`;
    if (filter.search) {
      message += `üîç <b>–ü–æ–∏—Å–∫:</b> "${filter.search}"\n`;
    }
    message += `üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> ${currentPage} –∏–∑ ${totalPages}\n`;
    message += `üìà <b>–ù–∞–π–¥–µ–Ω–æ:</b> ${totalKeys} –∫–ª—é—á–µ–π\n\n`;

    if (paginatedKeys.length === 0) {
      message += '‚ùå –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n';
    } else {
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–∏
      paginatedKeys.forEach((key, index) => {
        const keyNumber = offset + index + 1;
        const statusIcon = key.isActive ? '‚úÖ' : '‚ùå';
        const usageIcon = key.users.length > 0 ? 'üë§' : 'üÜì';
        
        message += `${keyNumber}. ${statusIcon} ${usageIcon} <code>${key.key}</code>\n`;
        message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${key.createdAt.toLocaleString('ru-RU')}\n`;
        
        if (key.users.length > 0) {
          const user = key.users[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É)
          if (user) {
            const userName = user.username ? `@${user.username}` : 
                            `${user.firstName || ''} ${user.lastName || ''}`.trim() || 
                            `ID: ${user.telegramId}`;
            message += `   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n`;
            message += `   üïê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${key.usedAt?.toLocaleString('ru-RU') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
          }
        } else {
          message += `   üÜì –°—Ç–∞—Ç—É—Å: –°–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á\n`;
        }
        message += '\n';
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = createKeysKeyboard(filter, totalPages, currentPage);

    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard: keyboard }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    logger.info('Keys list viewed', {
      adminId: ctx.user?.id,
      filter,
      totalKeys,
      currentPage,
      totalPages
    });

  } catch (error) {
    logger.error('Error in showKeysList', {
      error: error instanceof Error ? error.message : 'Unknown error',
      filter
    });
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
const createKeysKeyboard = (filter: KeysFilter, totalPages: number, currentPage: number) => {
  const keyboard = [];

  // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
  const statusRow1 = [
    {
      text: filter.status === 'all' ? '‚Ä¢ –í—Å–µ' : '–í—Å–µ',
      callback_data: `keys_filter_all_${currentPage}`
    },
    {
      text: filter.status === 'active' ? '‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ' : '–ê–∫—Ç–∏–≤–Ω—ã–µ',
      callback_data: `keys_filter_active_${currentPage}`
    },
    {
      text: filter.status === 'inactive' ? '‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ' : '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ',
      callback_data: `keys_filter_inactive_${currentPage}`
    }
  ];

  const statusRow2 = [
    {
      text: filter.status === 'used' ? '‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ' : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ',
      callback_data: `keys_filter_used_${currentPage}`
    },
    {
      text: filter.status === 'unused' ? '‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã–µ' : '–°–≤–æ–±–æ–¥–Ω—ã–µ',
      callback_data: `keys_filter_unused_${currentPage}`
    }
  ];

  keyboard.push(statusRow1, statusRow2);

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  if (totalPages > 1) {
    const paginationRow = [];
    
    if (currentPage > 1) {
      paginationRow.push({
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        callback_data: `keys_page_${currentPage - 1}_${filter.status || 'all'}`
      });
    }
    
    paginationRow.push({
      text: `${currentPage}/${totalPages}`,
      callback_data: 'keys_page_info'
    });
    
    if (currentPage < totalPages) {
      paginationRow.push({
        text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
        callback_data: `keys_page_${currentPage + 1}_${filter.status || 'all'}`
      });
    }
    
    keyboard.push(paginationRow);
  }

  // –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
  const controlRow1 = [
    {
      text: 'üîç –ü–æ–∏—Å–∫',
      callback_data: 'keys_search'
    },
    {
      text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
      callback_data: `keys_refresh_${currentPage}_${filter.status || 'all'}`
    }
  ];

  const controlRow2 = [
    {
      text: 'üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á',
      callback_data: 'keys_create_new'
    },
    {
      text: 'üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
      callback_data: 'keys_deactivate'
    }
  ];

  const controlRow3 = [
    {
      text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å',
      callback_data: 'keys_close'
    }
  ];

  keyboard.push(controlRow1, controlRow2, controlRow3);

  return keyboard;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
export const handleKeysCallbacks = async (ctx: BotContext, callbackData: string) => {
  try {
    const parts = callbackData.split('_');
    
    if (parts[0] !== 'keys') return;

    await ctx.answerCbQuery();

    switch (parts[1]) {
      case 'filter':
        const status = parts[2] as KeysFilter['status'];
        const pageStr = parts[3];
        const page = pageStr ? parseInt(pageStr) || 1 : 1;
        await ctx.deleteMessage();
        if (status) {
          await showKeysList(ctx, { status, page });
        }
        break;

      case 'page':
        const newPageStr = parts[2];
        const newPage = newPageStr ? parseInt(newPageStr) : 1;
        const filterStatus = parts[3] as KeysFilter['status'];
        await ctx.deleteMessage();
        if (filterStatus && newPageStr) {
          await showKeysList(ctx, { status: filterStatus, page: newPage });
        }
        break;

      case 'refresh':
        const refreshPageStr = parts[2];
        const refreshPage = refreshPageStr ? parseInt(refreshPageStr) || 1 : 1;
        const refreshStatus = parts[3] as KeysFilter['status'];
        await ctx.deleteMessage();
        if (refreshStatus && refreshPageStr) {
          await showKeysList(ctx, { status: refreshStatus, page: refreshPage });
        }
        break;

      case 'search':
        await ctx.deleteMessage();
        await ctx.reply('üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–∞–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:', {
          parse_mode: 'HTML'
        });
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞
        break;

      case 'create':
        if (parts[2] === 'new') {
          await ctx.deleteMessage();
          const { generateKeyHandler } = await import('./generateKey');
          await generateKeyHandler(ctx);
        }
        break;

      case 'deactivate':
        await ctx.deleteMessage();
        const { deactivateKeyHandler } = await import('./deactivateKey');
        await deactivateKeyHandler(ctx);
        break;

      case 'close':
        await ctx.deleteMessage();
        await ctx.reply('üîë –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∑–∞–∫—Ä—ã—Ç.');
        break;

      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        break;
    }

  } catch (error) {
    logger.error('Error in handleKeysCallbacks', {
      error: error instanceof Error ? error.message : 'Unknown error',
      callbackData,
      userId: ctx.user?.id
    });
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
  }
};
