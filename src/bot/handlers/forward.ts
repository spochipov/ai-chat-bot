import { BotContext } from '../middleware/auth';
import { logger } from '../../utils/logger';
import { DatabaseService } from '../../services/database';
import { OpenRouterService, OpenRouterMessage } from '../../services/openrouter';

export const forwardHandler = async (ctx: BotContext) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!ctx.user) {
      await ctx.reply('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!ctx.message || (!('forward_from' in ctx.message) && !('forward_from_chat' in ctx.message))) {
      await ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await ctx.sendChatAction('typing');

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      const forwardInfo = extractForwardInfo(ctx);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageContent = extractMessageContent(ctx);
      
      if (!messageContent) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
      const promptText = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:

üì® **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:**
${forwardInfo}

üìù **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
${messageContent}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const messageData: any = {
        userId: ctx.user.id,
        content: `[–ü–ï–†–ï–°–´–õ–ö–ê] ${forwardInfo}\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${messageContent}`,
        role: 'USER',
      };
      
      if (ctx.message?.message_id) {
        messageData.messageId = ctx.message.message_id;
      }
      
      await DatabaseService.createMessage(messageData);

      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const maxContextMessages = parseInt(
        (await DatabaseService.getSetting('max_context_messages'))?.value || '20'
      );
      
      const recentMessages = await DatabaseService.getUserMessages(
        ctx.user.id,
        maxContextMessages
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è OpenRouter
      const messages: OpenRouterMessage[] = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      messages.push({
        role: 'system',
        content: `–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –î–∞–π —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.`
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–µ)
      recentMessages.reverse().slice(0, -1).forEach(msg => {
        messages.push({
          role: msg.role.toLowerCase() as 'user' | 'assistant' | 'system',
          content: msg.content
        });
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
      messages.push({
        role: 'user',
        content: promptText
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenRouter
      const response = await OpenRouterService.sendMessage(messages);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const responseText = `üì® <b>–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n${forwardInfo}\n\nü§ñ <b>–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:</b>\n${response.content}`;

      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
      const maxMessageLength = 4000;
      if (responseText.length <= maxMessageLength) {
        await ctx.reply(responseText, { parse_mode: 'HTML' });
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
        const forwardInfoText = `üì® <b>–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n${forwardInfo}`;
        await ctx.reply(forwardInfoText, { parse_mode: 'HTML' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        await ctx.reply(`ü§ñ <b>–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:</b>\n${response.content}`, { parse_mode: 'HTML' });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const assistantMessageData: any = {
        userId: ctx.user.id,
        content: response.content,
        role: 'ASSISTANT',
        tokens: response.usage.totalTokens,
        cost: OpenRouterService.calculateCost(
          response.usage.promptTokens,
          response.usage.completionTokens,
          response.model
        ),
      };
      
      await DatabaseService.createMessage(assistantMessageData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      await DatabaseService.createUsage({
        userId: ctx.user.id,
        tokens: response.usage.totalTokens,
        cost: OpenRouterService.calculateCost(
          response.usage.promptTokens,
          response.usage.completionTokens,
          response.model
        ),
        model: response.model,
        requestType: 'forward',
      });

      logger.info('Forward message processed successfully', {
        userId: ctx.user.id,
        telegramId: ctx.user.telegramId.toString(),
        messageLength: messageContent.length,
        responseLength: response.content.length,
        tokens: response.usage.totalTokens,
        model: response.model,
        forwardFrom: ('forward_from' in ctx.message) ? 'user' : 'chat',
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error('Error processing forward message', {
        error: error instanceof Error ? error.message : 'Unknown error',
        userId: ctx.user.id,
        telegramId: ctx.user.telegramId.toString()
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.';
      
      if (error instanceof Error) {
        if (error.message.includes('Rate limit')) {
          errorMessage = '‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
        } else if (error.message.includes('Invalid OpenRouter API key')) {
          errorMessage = 'üîë –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (error.message.includes('service is temporarily unavailable')) {
          errorMessage = 'üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        }
      }

      await ctx.reply(errorMessage);
    }
    
  } catch (error) {
    logger.error('Error in forwardHandler', {
      error: error instanceof Error ? error.message : 'Unknown error',
      userId: ctx.user?.id,
      telegramId: ctx.from?.id
    });
    
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
function extractForwardInfo(ctx: BotContext): string {
  if (!ctx.message) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

  let info = '';

  if ('forward_from' in ctx.message && ctx.message.forward_from) {
    // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = ctx.message.forward_from as any;
    const userName = user.username ? `@${user.username}` : 
                    `${user.first_name || ''} ${user.last_name || ''}`.trim() || 
                    `ID: ${user.id}`;
    info = `üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}`;
  } else if ('forward_from_chat' in ctx.message && ctx.message.forward_from_chat) {
    // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
    const chat = ctx.message.forward_from_chat as any;
    const chatName = chat.title || `ID: ${chat.id}`;
    const chatType = chat.type === 'channel' ? '–∫–∞–Ω–∞–ª–∞' : 
                     chat.type === 'group' ? '–≥—Ä—É–ø–ø—ã' : 
                     chat.type === 'supergroup' ? '—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã' : '—á–∞—Ç–∞';
    info = `üí¨ –ò–∑ ${chatType}: ${chatName}`;
    
    if (chat.username) {
      info += ` (@${chat.username})`;
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
  if ('forward_date' in ctx.message && ctx.message.forward_date) {
    const forwardDate = new Date((ctx.message.forward_date as number) * 1000);
    info += `\nüìÖ –î–∞—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: ${forwardDate.toLocaleString('ru-RU')}`;
  }

  return info;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function extractMessageContent(ctx: BotContext): string | null {
  if (!ctx.message) return null;

  // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if ('text' in ctx.message && ctx.message.text) {
    return ctx.message.text;
  }

  // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
  if ('caption' in ctx.message && ctx.message.caption) {
    let content = ctx.message.caption;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –º–µ–¥–∏–∞
    if ('photo' in ctx.message) {
      content = `[–§–û–¢–û]\n${content}`;
    } else if ('video' in ctx.message) {
      content = `[–í–ò–î–ï–û]\n${content}`;
    } else if ('document' in ctx.message) {
      content = `[–î–û–ö–£–ú–ï–ù–¢]\n${content}`;
    } else if ('voice' in ctx.message) {
      content = `[–ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï]\n${content}`;
    } else if ('audio' in ctx.message) {
      content = `[–ê–£–î–ò–û]\n${content}`;
    }
    
    return content;
  }

  // –ú–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
  if ('photo' in ctx.message) {
    return '[–§–û–¢–û –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏]';
  } else if ('video' in ctx.message) {
    return '[–í–ò–î–ï–û –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏]';
  } else if ('document' in ctx.message) {
    const doc = ctx.message.document;
    return `[–î–û–ö–£–ú–ï–ù–¢: ${doc.file_name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}]`;
  } else if ('voice' in ctx.message) {
    const voice = ctx.message.voice;
    return `[–ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: ${voice.duration || 0} —Å–µ–∫.]`;
  } else if ('audio' in ctx.message) {
    const audio = ctx.message.audio;
    return `[–ê–£–î–ò–û: ${audio.title || audio.file_name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}]`;
  } else if ('sticker' in ctx.message) {
    const sticker = ctx.message.sticker;
    return `[–°–¢–ò–ö–ï–†: ${sticker.emoji || ''}]`;
  } else if ('location' in ctx.message) {
    const loc = ctx.message.location;
    return `[–ì–ï–û–õ–û–ö–ê–¶–ò–Ø: ${loc.latitude}, ${loc.longitude}]`;
  } else if ('contact' in ctx.message) {
    const contact = ctx.message.contact;
    return `[–ö–û–ù–¢–ê–ö–¢: ${contact.first_name} ${contact.last_name || ''} ${contact.phone_number}]`;
  }

  return '[–ù–ï–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ô –¢–ò–ü –°–û–û–ë–©–ï–ù–ò–Ø]';
}
