import { DatabaseService } from '../../src/services/database';
import { OpenRouterService } from '../../src/services/openrouter';
import { startHandler } from '../../src/bot/handlers/start';
import { BotContext } from '../../src/bot/middleware/auth';

// –ú–æ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('../../src/services/database');
jest.mock('../../src/services/openrouter');

const mockedDatabaseService = DatabaseService as jest.Mocked<typeof DatabaseService>;
const mockedOpenRouterService = OpenRouterService as jest.Mocked<typeof OpenRouterService>;

describe('Bot Integration Tests', () => {
  let mockCtx: Partial<BotContext>;

  beforeEach(() => {
    mockCtx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test',
        last_name: 'User',
        is_bot: false,
        language_code: 'ru',
      },
      reply: jest.fn(),
      session: {
        awaitingAccessKey: false,
        user: undefined,
      },
      awaitingAccessKey: false,
      user: undefined,
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞: –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(null);

      // –î–µ–π—Å—Ç–≤–∏–µ: –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start
      await startHandler(mockCtx as BotContext);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–∫–∞–∑–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üîê <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI —á–∞—Ç-–±–æ—Ç!</b>'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({
                  text: 'üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞',
                  callback_data: 'enter_access_key',
                }),
              ]),
            ]),
          }),
        })
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª—é—á–æ–º', async () => {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        username: 'testuser',
        firstName: 'Test',
        isActive: true,
        isAdmin: false,
        accessKey: {
          id: 'key-123',
          isActive: true,
        },
      };

      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(existingUser as any);

      // –î–µ–π—Å—Ç–≤–∏–µ: –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start
      await startHandler(mockCtx as BotContext);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, Test!'),
        { parse_mode: 'Markdown' }
      );
    });
  });

  describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenRouter', () => {
    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenRouter', async () => {
      const messages = [
        { role: 'user' as const, content: 'Hello, world!' },
      ];

      const mockResponse = {
        content: 'Hello! How can I help you today?',
        usage: {
          promptTokens: 9,
          completionTokens: 12,
          totalTokens: 21,
        },
        model: 'openai/gpt-4',
      };

      mockedOpenRouterService.sendMessage.mockResolvedValue(mockResponse);

      const result = await OpenRouterService.sendMessage(messages);

      expect(result).toEqual(mockResponse);
      expect(mockedOpenRouterService.sendMessage).toHaveBeenCalledWith(messages);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É OpenRouter API', async () => {
      const messages = [
        { role: 'user' as const, content: 'Test message' },
      ];

      mockedOpenRouterService.sendMessage.mockRejectedValue(
        new Error('OpenRouter API error')
      );

      await expect(OpenRouterService.sendMessage(messages)).rejects.toThrow(
        'OpenRouter API error'
      );
    });
  });

  describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', async () => {
      const userData = {
        telegramId: BigInt(123456789),
        username: 'testuser',
        firstName: 'Test',
        accessKeyId: 'key-123',
        isAdmin: false,
      };

      const createdUser = {
        id: 'user-123',
        ...userData,
      };

      const messageData = {
        userId: 'user-123',
        content: 'Test message',
        role: 'USER' as const,
        tokens: 10,
        cost: 0.001,
      };

      const createdMessage = {
        id: 'message-123',
        ...messageData,
        createdAt: new Date(),
      };

      mockedDatabaseService.createUser.mockResolvedValue(createdUser as any);
      mockedDatabaseService.createMessage.mockResolvedValue(createdMessage as any);

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await DatabaseService.createUser(userData);
      expect(user).toEqual(createdUser);

      // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const message = await DatabaseService.createMessage(messageData);
      expect(message).toEqual(createdMessage);

      expect(mockedDatabaseService.createUser).toHaveBeenCalledWith(userData);
      expect(mockedDatabaseService.createMessage).toHaveBeenCalledWith(messageData);
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userId = 'user-123';
      const expectedMessages = [
        {
          id: 'msg-1',
          content: 'Hello',
          role: 'USER',
          createdAt: new Date('2024-01-01T10:00:00Z'),
        },
        {
          id: 'msg-2',
          content: 'Hi there!',
          role: 'ASSISTANT',
          createdAt: new Date('2024-01-01T10:01:00Z'),
        },
      ];

      mockedDatabaseService.getUserMessages.mockResolvedValue(expectedMessages as any);

      const messages = await DatabaseService.getUserMessages(userId);

      expect(messages).toEqual(expectedMessages);
      expect(mockedDatabaseService.getUserMessages).toHaveBeenCalledWith(userId);
    });
  });

  describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', async () => {
      mockedDatabaseService.findUserByTelegramId.mockRejectedValue(
        new Error('Database connection failed')
      );

      await startHandler(mockCtx as BotContext);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenRouter —Å–µ—Ä–≤–∏—Å–∞', async () => {
      mockedOpenRouterService.healthCheck.mockResolvedValue(false);

      const isHealthy = await OpenRouterService.healthCheck();

      expect(isHealthy).toBe(false);
    });
  });

  describe('–°—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —á–∞—Ç–∞', async () => {
      // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      const user = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        isActive: true,
        accessKey: { isActive: true },
      };

      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(user as any);

      // 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
      const messageHistory = [
        { content: 'Previous message', role: 'USER' },
      ];

      mockedDatabaseService.getUserMessages.mockResolvedValue(messageHistory as any);

      // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenRouter
      const openRouterResponse = {
        content: 'AI response',
        usage: { promptTokens: 10, completionTokens: 15, totalTokens: 25 },
        model: 'openai/gpt-4',
      };

      mockedOpenRouterService.sendMessage.mockResolvedValue(openRouterResponse);

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      mockedDatabaseService.createMessage.mockResolvedValue({} as any);
      mockedDatabaseService.createUsage.mockResolvedValue({} as any);

      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
      const foundUser = await DatabaseService.findUserByTelegramId(BigInt(123456789));
      expect(foundUser).toEqual(user);

      const history = await DatabaseService.getUserMessages('user-123');
      expect(history).toEqual(messageHistory);

      const aiResponse = await OpenRouterService.sendMessage([
        { role: 'user', content: 'New message' },
      ]);
      expect(aiResponse).toEqual(openRouterResponse);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
      expect(mockedDatabaseService.findUserByTelegramId).toHaveBeenCalled();
      expect(mockedDatabaseService.getUserMessages).toHaveBeenCalled();
      expect(mockedOpenRouterService.sendMessage).toHaveBeenCalled();
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', async () => {
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
      const adminUser = {
        id: 'admin-123',
        telegramId: BigInt(123456789),
        isActive: true,
        isAdmin: true,
        accessKey: { isActive: true },
      };

      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(adminUser as any);

      await startHandler(mockCtx as BotContext);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑–∞–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üîß *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*'),
        { parse_mode: 'Markdown' }
      );
    });
  });

  describe('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä—É–∑–∫–∞', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', async () => {
      const userIds = ['user-1', 'user-2', 'user-3'];
      const mockUsers = userIds.map(id => ({
        id,
        telegramId: BigInt(parseInt(id.split('-')[1]) + 123456789),
        isActive: true,
      }));

      // –ú–æ–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      mockedDatabaseService.findUserByTelegramId
        .mockResolvedValueOnce(mockUsers[0] as any)
        .mockResolvedValueOnce(mockUsers[1] as any)
        .mockResolvedValueOnce(mockUsers[2] as any);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const promises = userIds.map((_, index) =>
        DatabaseService.findUserByTelegramId(BigInt(index + 123456790))
      );

      const results = await Promise.all(promises);

      expect(results).toHaveLength(3);
      expect(mockedDatabaseService.findUserByTelegramId).toHaveBeenCalledTimes(3);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ OpenRouter', async () => {
      const messages = [
        [{ role: 'user' as const, content: 'Message 1' }],
        [{ role: 'user' as const, content: 'Message 2' }],
        [{ role: 'user' as const, content: 'Message 3' }],
      ];

      const mockResponses = messages.map((_, index) => ({
        content: `Response ${index + 1}`,
        usage: { promptTokens: 5, completionTokens: 10, totalTokens: 15 },
        model: 'openai/gpt-4',
      }));

      mockedOpenRouterService.sendMessage
        .mockResolvedValueOnce(mockResponses[0])
        .mockResolvedValueOnce(mockResponses[1])
        .mockResolvedValueOnce(mockResponses[2]);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const promises = messages.map(msg => OpenRouterService.sendMessage(msg));
      const results = await Promise.all(promises);

      expect(results).toHaveLength(3);
      expect(results[0].content).toBe('Response 1');
      expect(results[1].content).toBe('Response 2');
      expect(results[2].content).toBe('Response 3');
    });
  });
});
