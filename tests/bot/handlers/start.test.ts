import { startHandler, handleAccessKeyInput } from '../../../src/bot/handlers/start';
import { DatabaseService } from '../../../src/services/database';
import { BotContext } from '../../../src/bot/middleware/auth';

// –ú–æ–∫–∞–µ–º DatabaseService
jest.mock('../../../src/services/database');
const mockedDatabaseService = DatabaseService as jest.Mocked<typeof DatabaseService>;

describe('Start Handler', () => {
  let mockCtx: Partial<BotContext>;

  beforeEach(() => {
    mockCtx = {
      from: {
        id: 123456789,
        username: 'testuser',
        first_name: 'Test',
        last_name: 'User',
        is_bot: false,
        language_code: 'ru',
      },
      reply: jest.fn(),
      session: {
        awaitingAccessKey: false,
        user: undefined,
      },
      awaitingAccessKey: false,
      user: undefined,
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('startHandler', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const existingUser = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        username: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        isActive: true,
        isAdmin: false,
        accessKey: {
          id: 'key-123',
          key: 'ACK_test',
          isActive: true,
        },
      };

      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(existingUser as any);

      await startHandler(mockCtx as BotContext);

      expect(mockedDatabaseService.findUserByTelegramId).toHaveBeenCalledWith(BigInt(123456789));
      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, Test!'),
        { parse_mode: 'Markdown' }
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏', async () => {
      const adminUser = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        username: 'admin',
        firstName: 'Admin',
        isActive: true,
        isAdmin: true,
        accessKey: {
          id: 'key-123',
          key: 'ACK_admin',
          isActive: true,
        },
      };

      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(adminUser as any);

      await startHandler(mockCtx as BotContext);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üîß *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*'),
        { parse_mode: 'Markdown' }
      );
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å –æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ', async () => {
      const deactivatedUser = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        isActive: false,
        accessKey: {
          isActive: true,
        },
      };

      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(deactivatedUser as any);

      await startHandler(mockCtx as BotContext);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∏—Ç—å –æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–ª—é—á–µ –¥–æ—Å—Ç—É–ø–∞', async () => {
      const userWithInactiveKey = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        isActive: true,
        accessKey: {
          isActive: false,
        },
      };

      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(userWithInactiveKey as any);

      await startHandler(mockCtx as BotContext);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      mockedDatabaseService.findUserByTelegramId.mockResolvedValue(null);

      await startHandler(mockCtx as BotContext);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('üîê <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI —á–∞—Ç-–±–æ—Ç!</b>'),
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîë –í–≤–µ—Å—Ç–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞',
                  callback_data: 'enter_access_key',
                },
              ],
              [
                {
                  text: 'üì® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                  callback_data: 'request_access',
                },
              ],
              [
                {
                  text: '‚ùì –°–ø—Ä–∞–≤–∫–∞',
                  callback_data: 'access_help',
                },
              ],
            ],
          },
        }
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', async () => {
      mockedDatabaseService.findUserByTelegramId.mockRejectedValue(new Error('Database error'));

      await startHandler(mockCtx as BotContext);

      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
      );
    });
  });

  describe('handleAccessKeyInput', () => {
    beforeEach(() => {
      mockCtx.session = {
        awaitingAccessKey: true,
        user: undefined,
      };
      mockCtx.awaitingAccessKey = true;
    });

    it('–¥–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–Ω—ã–º –∫–ª—é—á–æ–º', async () => {
      const accessKey = 'ACK_test_key_123456789012345678901234';
      const foundKey = {
        id: 'key-123',
        key: accessKey,
        isActive: true,
        createdAt: new Date(),
      };

      const newUser = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        username: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        accessKeyId: 'key-123',
        isAdmin: false,
      };

      mockedDatabaseService.findAccessKeyByKey.mockResolvedValue(foundKey as any);
      mockedDatabaseService.getClient.mockReturnValue({
        user: {
          findFirst: jest.fn().mockResolvedValue(null),
        },
      } as any);
      mockedDatabaseService.createUser.mockResolvedValue(newUser as any);
      mockedDatabaseService.updateAccessKey.mockResolvedValue({} as any);

      const result = await handleAccessKeyInput(mockCtx as BotContext, accessKey);

      expect(result).toBe(true);
      expect(mockedDatabaseService.findAccessKeyByKey).toHaveBeenCalledWith(accessKey);
      expect(mockedDatabaseService.createUser).toHaveBeenCalledWith({
        telegramId: BigInt(123456789),
        username: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        accessKeyId: 'key-123',
        isAdmin: false,
      });
      expect(mockedDatabaseService.updateAccessKey).toHaveBeenCalledWith('key-123', {
        usedAt: expect.any(Date),
      });
      expect(mockCtx.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*'),
        { parse_mode: 'Markdown' }
      );
      expect(mockCtx.session?.awaitingAccessKey).toBe(false);
      expect(mockCtx.awaitingAccessKey).toBe(false);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–ª—é—á —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º', async () => {
      const invalidKey = 'invalid_key';

      const result = await handleAccessKeyInput(mockCtx as BotContext, invalidKey);

      expect(result).toBe(false);
      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "ACK_" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 36 —Å–∏–º–≤–æ–ª–æ–≤.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á', async () => {
      const accessKey = 'ACK_nonexistent_key_1234567890123456';
      mockedDatabaseService.findAccessKeyByKey.mockResolvedValue(null);

      const result = await handleAccessKeyInput(mockCtx as BotContext, accessKey);

      expect(result).toBe(false);
      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á', async () => {
      const accessKey = 'ACK_inactive_key_123456789012345678';
      const inactiveKey = {
        id: 'key-123',
        key: accessKey,
        isActive: false,
      };

      mockedDatabaseService.findAccessKeyByKey.mockResolvedValue(inactiveKey as any);

      const result = await handleAccessKeyInput(mockCtx as BotContext, accessKey);

      expect(result).toBe(false);
      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –î–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á', async () => {
      const accessKey = 'ACK_used_key_1234567890123456789012';
      const usedKey = {
        id: 'key-123',
        key: accessKey,
        isActive: true,
      };

      const existingUser = {
        id: 'user-456',
        accessKeyId: 'key-123',
      };

      mockedDatabaseService.findAccessKeyByKey.mockResolvedValue(usedKey as any);
      mockedDatabaseService.getClient.mockReturnValue({
        user: {
          findFirst: jest.fn().mockResolvedValue(existingUser),
        },
      } as any);

      const result = await handleAccessKeyInput(mockCtx as BotContext, accessKey);

      expect(result).toBe(false);
      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –î–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const accessKey = 'ACK_test_key_123456789012345678901234';
      const foundKey = {
        id: 'key-123',
        key: accessKey,
        isActive: true,
      };

      mockedDatabaseService.findAccessKeyByKey.mockResolvedValue(foundKey as any);
      mockedDatabaseService.getClient.mockReturnValue({
        user: {
          findFirst: jest.fn().mockResolvedValue(null),
        },
      } as any);
      mockedDatabaseService.createUser.mockRejectedValue(new Error('Database error'));

      const result = await handleAccessKeyInput(mockCtx as BotContext, accessKey);

      expect(result).toBe(false);
      expect(mockCtx.reply).toHaveBeenCalledWith(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.'
      );
    });

    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π', async () => {
      const accessKey = 'ACK_test_key_123456789012345678901234';
      const foundKey = {
        id: 'key-123',
        key: accessKey,
        isActive: true,
      };

      // –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ username, first_name, last_name
      const minimalCtx = {
        ...mockCtx,
        from: {
          id: 123456789,
          is_bot: false,
          language_code: 'ru',
        },
      };

      const newUser = {
        id: 'user-123',
        telegramId: BigInt(123456789),
        accessKeyId: 'key-123',
        isAdmin: false,
      };

      mockedDatabaseService.findAccessKeyByKey.mockResolvedValue(foundKey as any);
      mockedDatabaseService.getClient.mockReturnValue({
        user: {
          findFirst: jest.fn().mockResolvedValue(null),
        },
      } as any);
      mockedDatabaseService.createUser.mockResolvedValue(newUser as any);
      mockedDatabaseService.updateAccessKey.mockResolvedValue({} as any);

      const result = await handleAccessKeyInput(minimalCtx as BotContext, accessKey);

      expect(result).toBe(true);
      expect(mockedDatabaseService.createUser).toHaveBeenCalledWith({
        telegramId: BigInt(123456789),
        accessKeyId: 'key-123',
        isAdmin: false,
      });
    });
  });
});
